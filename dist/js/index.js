/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};

;// CONCATENATED MODULE: ./src/utils/styles.ts
function camelToKebab(camelCaseString) {
    return camelCaseString.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();
}
function inlineStyles(styles) {
    return Object.keys(styles).reduce((inlineStyles, property) => {
        const value = styles[property];
        if (value !== undefined && value !== null) {
            return `${inlineStyles}${camelToKebab(property)}:${value};`;
        }
        return inlineStyles;
    }, '');
}

;// CONCATENATED MODULE: ./src/components/Sidebar.ts

function NavListItem({ linkText, href }) {
    const navListItemStyles = inlineStyles({
        padding: '0.25rem 1rem',
    });
    const navListItemMouseOver = (e) => {
        e.style.backgroundColor = '#424242';
    };
    const navListItemMouseOut = (e) => {
        e.style.backgroundColor = '';
    };
    const navLinkStyles = inlineStyles({
        color: '#ffffff',
        whiteSpace: 'nowrap',
    });
    return /*html*/ `
    <a href="${href}" style="${navLinkStyles}">
      <li 
        onmouseover="(${navListItemMouseOver})(this)" 
        onmouseout="(${navListItemMouseOut})(this)" 
        style="${navListItemStyles}"
      >
        ${linkText}
      </li>
    </a>
  `;
}
function SideBar() {
    const asideStyles = inlineStyles({
        flex: '15%',
        backgroundColor: '#0093E9',
        backgroundImage: 'linear-gradient(160deg, #0093E9 0%, #80D0C7 100%)',
    });
    const navStyles = inlineStyles({
        display: 'flex',
        flexDirection: 'column',
        gap: '1rem',
        padding: '1rem 0rem',
    });
    const navListTitleStyles = inlineStyles({
        padding: '0rem 1rem',
        fontSize: '1.15rem',
        color: '#ffffff',
        fontWeight: 'bold',
    });
    const navListStyles = inlineStyles({
        display: 'flex',
        flexDirection: 'column',
    });
    const primaryNavLinkItems = [
        { linkText: 'My Day', href: '#' },
        { linkText: 'Next 7 Days', href: '#' },
        { linkText: 'All my tasks', href: '#' },
    ];
    const secondaryNavLinkItems = [{ linkText: 'Inbox', href: '#' }];
    return /*html*/ `
    <aside style="${asideStyles}">
      <nav style="${navStyles}">
        <ul style="${navListStyles}">
          ${primaryNavLinkItems
        .map(item => NavListItem({ linkText: item.linkText, href: item.href }))
        .join('')}
        </ul>
        <div>
          <div style="${navListTitleStyles}">My lists</div>
          <ul style="${navListStyles}">
          ${secondaryNavLinkItems
        .map(item => NavListItem({ linkText: item.linkText, href: item.href }))
        .join('')}
          </ul>
        </div
      </nav>
    </aside>`;
}

;// CONCATENATED MODULE: ./src/layout.ts


function Layout() {
    const containerStyles = inlineStyles({
        height: '100%',
        display: 'flex',
    });
    const mainStyles = inlineStyles({
        flex: '85%',
    });
    return /*html*/ `
    <div style="${containerStyles}">
      ${SideBar()}
      <main id="app" style="${mainStyles}"></main>
    </div>
  `;
}

;// CONCATENATED MODULE: ./src/views/MyDay.ts
function MyDay() {
    return /*html*/ `
    <h1>My Day</h1>
  `;
}

;// CONCATENATED MODULE: ./src/views/NotFound.ts
function NotFound() {
    return /*html*/ `
    <h1>Not Found</h1>
  `;
}

;// CONCATENATED MODULE: ./src/router.ts


function router() {
    const routes = [{ path: '/', view: MyDay }].map(route => {
        route.path = "/theOdinProject-Todo-List/" + route.path;
        return route;
    });
    // match path from beginning to end
    // escape forward slashes
    // replace path placeholders
    // with capture groups
    const matches = routes.map(route => ({
        route,
        result: location.pathname.match(new RegExp('^' + route.path.replace(/\//g, '\\/').replace(/:\w+/g, '(.+)') + '$')),
    }));
    let match = matches.find(match => match.result !== null);
    if (match === null || match === undefined) {
        match = {
            route: {
                path: location.pathname,
                view: NotFound,
            },
            result: [location.pathname],
        };
    }
    const pathParams = [...match.route.path.matchAll(/:(\w+)/g)]
        .map(result => result[1])
        .reduce((prev, curr, i) => (prev[curr] = match.result.slice(1)[i]), {});
    const queryString = match.route.path.split('?')[1];
    const queryParams = queryString === undefined
        ? {}
        : queryString.split('&').reduce((prev, curr) => {
            const [key, value] = curr.split('=');
            if (key === undefined || value === undefined) {
                return prev;
            }
            return (prev[key] = decodeURIComponent(value.replace(/\+/g, ' ')));
        }, {});
    const view = match.route.view({ pathParams, queryParams });
    document.getElementById('app').innerHTML = view;
}
function router_navigate(url) {
    history.pushState(null, null, url);
    router();
}

;// CONCATENATED MODULE: ./src/index.ts


const root = document.getElementById('root');
root.innerHTML = Layout();
window.addEventListener('popstate', router);
document.body.addEventListener('click', (e) => {
    if (e.target.matches('[data-link]')) {
        e.preventDefault();
        router_navigate(e.target.href);
    }
});
router();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNuQyxNQUFNLEVBQUUsQ0FBQztBQUNYLENBQUM7OztBQzFFNkI7QUFDYztBQUU1QyxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzdDLElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxFQUFFLENBQUM7QUFFMUIsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUU1QyxRQUFRLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUM1QixPQUFPLEVBQ1AsQ0FBQyxDQUF3QyxFQUFFLEVBQUU7SUFDM0MsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsRUFBRTtRQUNuQyxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDbkIsZUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDekI7QUFDSCxDQUFDLENBQ0YsQ0FBQztBQUVGLE1BQU0sRUFBRSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlb2RpbnByb2plY3QtdG9kby1saXN0Ly4vc3JjL3V0aWxzL3N0eWxlcy50cyIsIndlYnBhY2s6Ly90aGVvZGlucHJvamVjdC10b2RvLWxpc3QvLi9zcmMvY29tcG9uZW50cy9TaWRlYmFyLnRzIiwid2VicGFjazovL3RoZW9kaW5wcm9qZWN0LXRvZG8tbGlzdC8uL3NyYy9sYXlvdXQudHMiLCJ3ZWJwYWNrOi8vdGhlb2RpbnByb2plY3QtdG9kby1saXN0Ly4vc3JjL3ZpZXdzL015RGF5LnRzIiwid2VicGFjazovL3RoZW9kaW5wcm9qZWN0LXRvZG8tbGlzdC8uL3NyYy92aWV3cy9Ob3RGb3VuZC50cyIsIndlYnBhY2s6Ly90aGVvZGlucHJvamVjdC10b2RvLWxpc3QvLi9zcmMvcm91dGVyLnRzIiwid2VicGFjazovL3RoZW9kaW5wcm9qZWN0LXRvZG8tbGlzdC8uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBjYW1lbFRvS2ViYWIoY2FtZWxDYXNlU3RyaW5nOiBzdHJpbmcpIHtcclxuICByZXR1cm4gY2FtZWxDYXNlU3RyaW5nLnJlcGxhY2UoLyhbYS16MC05XSkoW0EtWl0pL2csICckMS0kMicpLnRvTG93ZXJDYXNlKCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpbmxpbmVTdHlsZXMoc3R5bGVzOiBvYmplY3QpIHtcclxuICByZXR1cm4gT2JqZWN0LmtleXMoc3R5bGVzKS5yZWR1Y2UoKGlubGluZVN0eWxlcywgcHJvcGVydHkpID0+IHtcclxuICAgIGNvbnN0IHZhbHVlID0gc3R5bGVzW3Byb3BlcnR5XTtcclxuXHJcbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICByZXR1cm4gYCR7aW5saW5lU3R5bGVzfSR7Y2FtZWxUb0tlYmFiKHByb3BlcnR5KX06JHt2YWx1ZX07YDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gaW5saW5lU3R5bGVzO1xyXG4gIH0sICcnKTtcclxufVxyXG4iLCJpbXBvcnQgeyBpbmxpbmVTdHlsZXMgfSBmcm9tICcuLi91dGlscy9zdHlsZXMnO1xyXG5cclxuZnVuY3Rpb24gTmF2TGlzdEl0ZW0oeyBsaW5rVGV4dCwgaHJlZiB9OiB7IGxpbmtUZXh0OiBzdHJpbmc7IGhyZWY6IHN0cmluZyB9KSB7XHJcbiAgY29uc3QgbmF2TGlzdEl0ZW1TdHlsZXMgPSBpbmxpbmVTdHlsZXMoe1xyXG4gICAgcGFkZGluZzogJzAuMjVyZW0gMXJlbScsXHJcbiAgfSk7XHJcblxyXG4gIGNvbnN0IG5hdkxpc3RJdGVtTW91c2VPdmVyID0gKGU6IEhUTUxFbGVtZW50KSA9PiB7XHJcbiAgICBlLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcjNDI0MjQyJztcclxuICB9O1xyXG5cclxuICBjb25zdCBuYXZMaXN0SXRlbU1vdXNlT3V0ID0gKGU6IEhUTUxFbGVtZW50KSA9PiB7XHJcbiAgICBlLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcnO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IG5hdkxpbmtTdHlsZXMgPSBpbmxpbmVTdHlsZXMoe1xyXG4gICAgY29sb3I6ICcjZmZmZmZmJyxcclxuICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gLypodG1sKi8gYFxyXG4gICAgPGEgaHJlZj1cIiR7aHJlZn1cIiBzdHlsZT1cIiR7bmF2TGlua1N0eWxlc31cIj5cclxuICAgICAgPGxpIFxyXG4gICAgICAgIG9ubW91c2VvdmVyPVwiKCR7bmF2TGlzdEl0ZW1Nb3VzZU92ZXJ9KSh0aGlzKVwiIFxyXG4gICAgICAgIG9ubW91c2VvdXQ9XCIoJHtuYXZMaXN0SXRlbU1vdXNlT3V0fSkodGhpcylcIiBcclxuICAgICAgICBzdHlsZT1cIiR7bmF2TGlzdEl0ZW1TdHlsZXN9XCJcclxuICAgICAgPlxyXG4gICAgICAgICR7bGlua1RleHR9XHJcbiAgICAgIDwvbGk+XHJcbiAgICA8L2E+XHJcbiAgYDtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU2lkZUJhcigpIHtcclxuICBjb25zdCBhc2lkZVN0eWxlcyA9IGlubGluZVN0eWxlcyh7XHJcbiAgICBmbGV4OiAnMTUlJyxcclxuICAgIGJhY2tncm91bmRDb2xvcjogJyMwMDkzRTknLFxyXG4gICAgYmFja2dyb3VuZEltYWdlOiAnbGluZWFyLWdyYWRpZW50KDE2MGRlZywgIzAwOTNFOSAwJSwgIzgwRDBDNyAxMDAlKScsXHJcbiAgfSk7XHJcblxyXG4gIGNvbnN0IG5hdlN0eWxlcyA9IGlubGluZVN0eWxlcyh7XHJcbiAgICBkaXNwbGF5OiAnZmxleCcsXHJcbiAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcclxuICAgIGdhcDogJzFyZW0nLFxyXG4gICAgcGFkZGluZzogJzFyZW0gMHJlbScsXHJcbiAgfSk7XHJcblxyXG4gIGNvbnN0IG5hdkxpc3RUaXRsZVN0eWxlcyA9IGlubGluZVN0eWxlcyh7XHJcbiAgICBwYWRkaW5nOiAnMHJlbSAxcmVtJyxcclxuICAgIGZvbnRTaXplOiAnMS4xNXJlbScsXHJcbiAgICBjb2xvcjogJyNmZmZmZmYnLFxyXG4gICAgZm9udFdlaWdodDogJ2JvbGQnLFxyXG4gIH0pO1xyXG5cclxuICBjb25zdCBuYXZMaXN0U3R5bGVzID0gaW5saW5lU3R5bGVzKHtcclxuICAgIGRpc3BsYXk6ICdmbGV4JyxcclxuICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxyXG4gIH0pO1xyXG5cclxuICBjb25zdCBwcmltYXJ5TmF2TGlua0l0ZW1zID0gW1xyXG4gICAgeyBsaW5rVGV4dDogJ015IERheScsIGhyZWY6ICcjJyB9LFxyXG4gICAgeyBsaW5rVGV4dDogJ05leHQgNyBEYXlzJywgaHJlZjogJyMnIH0sXHJcbiAgICB7IGxpbmtUZXh0OiAnQWxsIG15IHRhc2tzJywgaHJlZjogJyMnIH0sXHJcbiAgXTtcclxuXHJcbiAgY29uc3Qgc2Vjb25kYXJ5TmF2TGlua0l0ZW1zID0gW3sgbGlua1RleHQ6ICdJbmJveCcsIGhyZWY6ICcjJyB9XTtcclxuXHJcbiAgcmV0dXJuIC8qaHRtbCovIGBcclxuICAgIDxhc2lkZSBzdHlsZT1cIiR7YXNpZGVTdHlsZXN9XCI+XHJcbiAgICAgIDxuYXYgc3R5bGU9XCIke25hdlN0eWxlc31cIj5cclxuICAgICAgICA8dWwgc3R5bGU9XCIke25hdkxpc3RTdHlsZXN9XCI+XHJcbiAgICAgICAgICAke3ByaW1hcnlOYXZMaW5rSXRlbXNcclxuICAgICAgICAgICAgLm1hcChpdGVtID0+XHJcbiAgICAgICAgICAgICAgTmF2TGlzdEl0ZW0oeyBsaW5rVGV4dDogaXRlbS5saW5rVGV4dCwgaHJlZjogaXRlbS5ocmVmIH0pXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICAgLmpvaW4oJycpfVxyXG4gICAgICAgIDwvdWw+XHJcbiAgICAgICAgPGRpdj5cclxuICAgICAgICAgIDxkaXYgc3R5bGU9XCIke25hdkxpc3RUaXRsZVN0eWxlc31cIj5NeSBsaXN0czwvZGl2PlxyXG4gICAgICAgICAgPHVsIHN0eWxlPVwiJHtuYXZMaXN0U3R5bGVzfVwiPlxyXG4gICAgICAgICAgJHtzZWNvbmRhcnlOYXZMaW5rSXRlbXNcclxuICAgICAgICAgICAgLm1hcChpdGVtID0+XHJcbiAgICAgICAgICAgICAgTmF2TGlzdEl0ZW0oeyBsaW5rVGV4dDogaXRlbS5saW5rVGV4dCwgaHJlZjogaXRlbS5ocmVmIH0pXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICAgLmpvaW4oJycpfVxyXG4gICAgICAgICAgPC91bD5cclxuICAgICAgICA8L2RpdlxyXG4gICAgICA8L25hdj5cclxuICAgIDwvYXNpZGU+YDtcclxufVxyXG4iLCJpbXBvcnQgU2lkZUJhciBmcm9tICcuL2NvbXBvbmVudHMvU2lkZWJhcic7XHJcbmltcG9ydCB7IGlubGluZVN0eWxlcyB9IGZyb20gJy4vdXRpbHMvc3R5bGVzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIExheW91dCgpIHtcclxuICBjb25zdCBjb250YWluZXJTdHlsZXMgPSBpbmxpbmVTdHlsZXMoe1xyXG4gICAgaGVpZ2h0OiAnMTAwJScsXHJcbiAgICBkaXNwbGF5OiAnZmxleCcsXHJcbiAgfSk7XHJcblxyXG4gIGNvbnN0IG1haW5TdHlsZXMgPSBpbmxpbmVTdHlsZXMoe1xyXG4gICAgZmxleDogJzg1JScsXHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiAvKmh0bWwqLyBgXHJcbiAgICA8ZGl2IHN0eWxlPVwiJHtjb250YWluZXJTdHlsZXN9XCI+XHJcbiAgICAgICR7U2lkZUJhcigpfVxyXG4gICAgICA8bWFpbiBpZD1cImFwcFwiIHN0eWxlPVwiJHttYWluU3R5bGVzfVwiPjwvbWFpbj5cclxuICAgIDwvZGl2PlxyXG4gIGA7XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTXlEYXkoKSB7XHJcbiAgcmV0dXJuIC8qaHRtbCovIGBcclxuICAgIDxoMT5NeSBEYXk8L2gxPlxyXG4gIGA7XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTm90Rm91bmQoKSB7XHJcbiAgcmV0dXJuIC8qaHRtbCovIGBcclxuICAgIDxoMT5Ob3QgRm91bmQ8L2gxPlxyXG4gIGA7XHJcbn1cclxuIiwiaW1wb3J0IE15RGF5IGZyb20gJy4vdmlld3MvTXlEYXknO1xyXG5pbXBvcnQgTm90Rm91bmQgZnJvbSAnLi92aWV3cy9Ob3RGb3VuZCc7XHJcblxyXG50eXBlIFZpZXdQcm9wcyA9IHtcclxuICBwYXRoUGFyYW1zOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9O1xyXG4gIHF1ZXJ5UGFyYW1zOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9O1xyXG59O1xyXG5cclxudHlwZSBSb3V0ZSA9IHtcclxuICBwYXRoOiBzdHJpbmc7XHJcbiAgdmlldzogKHByb3BzOiBWaWV3UHJvcHMpID0+IHN0cmluZztcclxufTtcclxuXHJcbnR5cGUgTWF0Y2ggPSB7XHJcbiAgcm91dGU6IFJvdXRlO1xyXG4gIHJlc3VsdDogUmVnRXhwTWF0Y2hBcnJheTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByb3V0ZXIoKSB7XHJcbiAgY29uc3Qgcm91dGVzOiBSb3V0ZVtdID0gW3sgcGF0aDogJy8nLCB2aWV3OiBNeURheSB9XS5tYXAocm91dGUgPT4ge1xyXG4gICAgcm91dGUucGF0aCA9IHByb2Nlc3MuZW52LkJBU0VfUEFUSCArIHJvdXRlLnBhdGg7XHJcbiAgICByZXR1cm4gcm91dGU7XHJcbiAgfSk7XHJcblxyXG4gIC8vIG1hdGNoIHBhdGggZnJvbSBiZWdpbm5pbmcgdG8gZW5kXHJcbiAgLy8gZXNjYXBlIGZvcndhcmQgc2xhc2hlc1xyXG4gIC8vIHJlcGxhY2UgcGF0aCBwbGFjZWhvbGRlcnNcclxuICAvLyB3aXRoIGNhcHR1cmUgZ3JvdXBzXHJcbiAgY29uc3QgbWF0Y2hlczogTWF0Y2hbXSA9IHJvdXRlcy5tYXAocm91dGUgPT4gKHtcclxuICAgIHJvdXRlLFxyXG4gICAgcmVzdWx0OiBsb2NhdGlvbi5wYXRobmFtZS5tYXRjaChcclxuICAgICAgbmV3IFJlZ0V4cChcclxuICAgICAgICAnXicgKyByb3V0ZS5wYXRoLnJlcGxhY2UoL1xcLy9nLCAnXFxcXC8nKS5yZXBsYWNlKC86XFx3Ky9nLCAnKC4rKScpICsgJyQnXHJcbiAgICAgIClcclxuICAgICksXHJcbiAgfSkpO1xyXG5cclxuICBsZXQgbWF0Y2ggPSBtYXRjaGVzLmZpbmQobWF0Y2ggPT4gbWF0Y2gucmVzdWx0ICE9PSBudWxsKTtcclxuXHJcbiAgaWYgKG1hdGNoID09PSBudWxsIHx8IG1hdGNoID09PSB1bmRlZmluZWQpIHtcclxuICAgIG1hdGNoID0ge1xyXG4gICAgICByb3V0ZToge1xyXG4gICAgICAgIHBhdGg6IGxvY2F0aW9uLnBhdGhuYW1lLFxyXG4gICAgICAgIHZpZXc6IE5vdEZvdW5kLFxyXG4gICAgICB9LFxyXG4gICAgICByZXN1bHQ6IFtsb2NhdGlvbi5wYXRobmFtZV0sXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgY29uc3QgcGF0aFBhcmFtcyA9IFsuLi5tYXRjaC5yb3V0ZS5wYXRoLm1hdGNoQWxsKC86KFxcdyspL2cpXVxyXG4gICAgLm1hcChyZXN1bHQgPT4gcmVzdWx0WzFdKVxyXG4gICAgLnJlZHVjZSgocHJldiwgY3VyciwgaSkgPT4gKHByZXZbY3Vycl0gPSBtYXRjaC5yZXN1bHQuc2xpY2UoMSlbaV0pLCB7fSk7XHJcblxyXG4gIGNvbnN0IHF1ZXJ5U3RyaW5nID0gbWF0Y2gucm91dGUucGF0aC5zcGxpdCgnPycpWzFdO1xyXG4gIGNvbnN0IHF1ZXJ5UGFyYW1zID1cclxuICAgIHF1ZXJ5U3RyaW5nID09PSB1bmRlZmluZWRcclxuICAgICAgPyB7fVxyXG4gICAgICA6IHF1ZXJ5U3RyaW5nLnNwbGl0KCcmJykucmVkdWNlKChwcmV2LCBjdXJyKSA9PiB7XHJcbiAgICAgICAgICBjb25zdCBba2V5LCB2YWx1ZV0gPSBjdXJyLnNwbGl0KCc9Jyk7XHJcblxyXG4gICAgICAgICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHByZXY7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgcmV0dXJuIChwcmV2W2tleV0gPSBkZWNvZGVVUklDb21wb25lbnQodmFsdWUucmVwbGFjZSgvXFwrL2csICcgJykpKTtcclxuICAgICAgICB9LCB7fSk7XHJcblxyXG4gIGNvbnN0IHZpZXcgPSBtYXRjaC5yb3V0ZS52aWV3KHsgcGF0aFBhcmFtcywgcXVlcnlQYXJhbXMgfSk7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FwcCcpLmlubmVySFRNTCA9IHZpZXc7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBuYXZpZ2F0ZSh1cmw6IHN0cmluZykge1xyXG4gIGhpc3RvcnkucHVzaFN0YXRlKG51bGwsIG51bGwsIHVybCk7XHJcbiAgcm91dGVyKCk7XHJcbn1cclxuIiwiaW1wb3J0IExheW91dCBmcm9tICcuL2xheW91dCc7XHJcbmltcG9ydCB7IG5hdmlnYXRlLCByb3V0ZXIgfSBmcm9tICcuL3JvdXRlcic7XHJcblxyXG5jb25zdCByb290ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb3QnKTtcclxucm9vdC5pbm5lckhUTUwgPSBMYXlvdXQoKTtcclxuXHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIHJvdXRlcik7XHJcblxyXG5kb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXHJcbiAgJ2NsaWNrJyxcclxuICAoZTogRXZlbnQgJiB7IHRhcmdldDogSFRNTEFuY2hvckVsZW1lbnQgfSkgPT4ge1xyXG4gICAgaWYgKGUudGFyZ2V0Lm1hdGNoZXMoJ1tkYXRhLWxpbmtdJykpIHtcclxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICBuYXZpZ2F0ZShlLnRhcmdldC5ocmVmKTtcclxuICAgIH1cclxuICB9XHJcbik7XHJcblxyXG5yb3V0ZXIoKTtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9